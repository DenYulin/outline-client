/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package gobind/gobind */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 8 "go_main.go"

#include <stdlib.h>
#include <stdint.h>
#include "seq.h"
#include "universe.h"


#line 1 "cgo-generated-wrapper"

#line 8 "go_tun2xraymain.go"

#include <stdlib.h>
#include <stdint.h>
#include "seq.h"
#include "tun2xray.h"


#line 1 "cgo-generated-wrapper"

#line 8 "go_xraymain.go"

#include <stdlib.h>
#include <stdint.h>
#include "seq.h"
#include "xray.h"


#line 1 "cgo-generated-wrapper"

#line 11 "seq.go"


 #include <stdlib.h>
 #include "seq.h"

#line 1 "cgo-generated-wrapper"

#line 11 "seq_android.go"


#include <jni.h>
#include <stdint.h>
#include <stdlib.h>
#include "seq_android.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern nstring proxy_error_Error(int32_t refnum);

/* Return type for proxytun2xray__ConnectXrayTunnel */
struct proxytun2xray__ConnectXrayTunnel_return {
	int32_t r0;
	int32_t r1;
};
extern struct proxytun2xray__ConnectXrayTunnel_return proxytun2xray__ConnectXrayTunnel(nint param_fd, nstring param_configType, nstring param_jsonConfig, nstring param_serverAddress, nint param_serverPort, nstring param_userId);
extern int32_t new_xray_Args();
extern void proxyxray_Profile_Host_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_Host_Get(int32_t refnum);
extern void proxyxray_Profile_Path_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_Path_Get(int32_t refnum);
extern void proxyxray_Profile_TLS_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_TLS_Get(int32_t refnum);
extern void proxyxray_Profile_Address_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_Address_Get(int32_t refnum);
extern void proxyxray_Profile_Net_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_Net_Get(int32_t refnum);
extern void proxyxray_Profile_ID_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_ID_Get(int32_t refnum);
extern void proxyxray_Profile_Flow_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_Flow_Get(int32_t refnum);
extern void proxyxray_Profile_Type_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_Type_Get(int32_t refnum);
extern void proxyxray_Profile_OutboundProtocol_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_OutboundProtocol_Get(int32_t refnum);
extern void proxyxray_Profile_UseIPv6_Set(int32_t refnum, char v);
extern char proxyxray_Profile_UseIPv6_Get(int32_t refnum);
extern void proxyxray_Profile_LogLevel_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_LogLevel_Get(int32_t refnum);
extern void proxyxray_Profile_RouteMode_Set(int32_t refnum, nint v);
extern nint proxyxray_Profile_RouteMode_Get(int32_t refnum);
extern void proxyxray_Profile_DNS_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_DNS_Get(int32_t refnum);
extern void proxyxray_Profile_AllowInsecure_Set(int32_t refnum, char v);
extern char proxyxray_Profile_AllowInsecure_Get(int32_t refnum);
extern void proxyxray_Profile_Mux_Set(int32_t refnum, nint v);
extern nint proxyxray_Profile_Mux_Get(int32_t refnum);
extern void proxyxray_Profile_AssetPath_Set(int32_t refnum, nstring v);
extern nstring proxyxray_Profile_AssetPath_Get(int32_t refnum);
extern nstring proxyxray_Profile_String(int32_t refnum);
extern int32_t new_xray_Profile();
extern void proxyxray_OutlineTunnel_Disconnect(int32_t refnum);
extern char proxyxray_OutlineTunnel_IsConnected(int32_t refnum);
extern char proxyxray_OutlineTunnel_UpdateUDPSupport(int32_t refnum);

/* Return type for proxyxray_OutlineTunnel_Write */
struct proxyxray_OutlineTunnel_Write_return {
	nint r0;
	int32_t r1;
};
extern struct proxyxray_OutlineTunnel_Write_return proxyxray_OutlineTunnel_Write(int32_t refnum, nbyteslice param_data);
extern int32_t proxyxray_TunWriter_Close(int32_t refnum);

/* Return type for proxyxray_TunWriter_Write */
struct proxyxray_TunWriter_Write_return {
	nint r0;
	int32_t r1;
};
extern struct proxyxray_TunWriter_Write_return proxyxray_TunWriter_Write(int32_t refnum, nbyteslice param_p0);

/* Return type for proxyxray__CheckConnectivity */
struct proxyxray__CheckConnectivity_return {
	nint r0;
	int32_t r1;
};
extern struct proxyxray__CheckConnectivity_return proxyxray__CheckConnectivity(nstring param_serverAddress, nint param_serverPort, nstring param_userId);
extern int32_t proxyxray__CheckServerReachable(nstring param_host, nint param_port);

/* Return type for proxyxray__CreateOutlineTunnel */
struct proxyxray__CreateOutlineTunnel_return {
	int32_t r0;
	int32_t r1;
};
extern struct proxyxray__CreateOutlineTunnel_return proxyxray__CreateOutlineTunnel(int32_t param_tun, nstring param_configType, nstring param_jsonConfig, nstring param_serverAddress, nint param_serverPort, nstring param_userId);

// skipped function CreateXrayClient with unsupported parameter or result types
extern char proxyxray__FileExists(nstring param_file);

// IncGoRef is called by foreign code to pin a Go object while its refnum is crossing
// the language barrier
extern void IncGoRef(int32_t refnum);

// DestroyRef is called by Java to inform Go it is done with a reference.
extern void DestroyRef(int32_t refnum);

#ifdef __cplusplus
}
#endif
